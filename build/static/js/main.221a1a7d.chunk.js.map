{"version":3,"sources":["redux/api/urls.js","redux/api/api.js","redux/duck/redux.duck.js","redux/rootReducer.js","redux/store.js","component/topMenu/index.js","conf/index.js","container/topMenu.js","component/elementTd/index.js","component/timetable/index.js","container/content.js","component/loader/index.js","container/page.js","App.js","reportWebVitals.js","index.js"],"names":["urls","base","departments","departmentSubjects","depId","subject","subjectShifts","instance","getDepartmentSubjects","department","axios","get","getSubject","getSubjectShifts","saga","types","initialState","view","undefined","year","all","chosen","shifts","classes","loading","reducer","persistReducer","storage","key","state","action","type","newState","payload","name","content","newChosen","id","newShifts","newClasses","count","number","actions","years","subjects","subjectInfo","takeLatest","Date","getMonth","getFullYear","push","put","select","redux","Array","isArray","data","api","Object","keys","index","instances","found","length","infoSubject","credits","url","shiftsInformation","t","to","tp","tpo","p","po","abbreviation","building","map","shift","infoShift","teachers","duration","room","type_display","indexOf","title","toLowerCase","rootSaga","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","middleware","getDefaultMiddleware","immutableCheck","serializableCheck","thunk","store","configureStore","devTools","process","enhancers","reduxBatch","persistor","persistStore","run","TopMenu","logo","dispatch","useDispatch","useSelector","changeYear","setView","chosenSubjects","values","sort","a","b","src","value","onChange","event","target","disabled","selected","chooseDepartment","option","chooseSubject","obj","onClick","removeSubject","className","conf","TopMenuContainer","ElementTD","times","elements","time","console","log","Timetable","maxClasses","hours","filled","chosenClasses","saveOrRemoveClass","colSpan","hour","toString","parseInt","day","shiftInfo","rowSpan","onMouseOver","$","addClass","onMouseLeave","removeClass","ContentContainer","current","hour1","hour2","showShifts","start","weekday","Math","max","Loader","PageContainer","useEffect","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.221a1a7d.chunk.js","sourcesContent":["const urls = {\n    base: () => \"https://api.horarios.bitsys.tech/get?url=\",\n    departments: () => urls.base() + \"/departments\",\n    departmentSubjects: (depId) => urls.base() + \"/department/\" + depId,\n    subject: (subject) => urls.base() + \"/class/\" + subject,\n    subjectShifts: (instance) => urls.base() + \"/class/i/\" + instance + \"/shifts\"\n};\n\nexport default urls;","import axios from \"axios\";\nimport urls from \"./urls\";\n\nexport function getDepartments() {\n    return axios.get(urls.departments());\n}\n\nexport function getDepartmentSubjects(department) {\n    return axios.get(urls.departmentSubjects(department));\n}\n\nexport function getSubject(subject) {\n    return axios.get(urls.subject(subject));\n}\n\nexport function getSubjectShifts(instance) {\n    return axios.get(urls.subjectShifts(instance));\n}","import {put, takeLatest, select, all} from \"redux-saga/effects\";\nimport {persistReducer} from \"redux-persist\";\nimport {useHistory} from \"react-router-dom\";\nimport storage from \"redux-persist/lib/storage\";\nimport * as api from \"../api/api\";\n//import Swal from \"sweetalert2\";\n//import withReactContent from \"sweetalert2-react-content\";\n\n//const swal = withReactContent(Swal);\n\nexport const types = {\n    Init: \"[Redux] Init\",\n    Set: \"[Redux] Set\",\n    SetYears: \"[Redux] SetYears\",\n    ChangeYear: \"[Redux] ChangeYear\",\n    GetDepartments: \"[Redux] GetDepartments\",\n    SetDepartments: \"[Redux] SetDepartments\",\n    SetDepartment: \"[Redux] SetDepartment\",\n    GetDepartmentSubjects: \"[Redux] GetDepartmentSubjects\",\n    SetSubjects: \"[Redux] SetSubjects\",\n    AddOrUpdateSubjects: \"[Redux] AddOrUpdateSubjects\",\n    AddSubjectDone: \"[Redux] AddSubjectDone\",\n    RemoveSubject: \"[Redux] RemoveSubject\",\n    AddOrUpdateShifts: \"[Redux] AddOrUpdateShifts\",\n    SaveClass: \"[Redux] SaveClass\",\n    RemoveClass: \"[Redux] RemoveClass\",\n    SetView: \"[Redux] SetView\",\n    Nothing: \"[Redux] Nothing\",\n};\n\nconst initialState = {\n    view: undefined,\n    year: {\n        all: [],\n        chosen: undefined\n    },\n    department: {\n        all: [],\n        chosen: undefined\n    },\n    subject: {\n        all: [],\n        chosen: {}\n    },\n    shifts: {},\n    classes: {},\n    loading: true\n};\n\nexport const reducer = persistReducer(\n    {storage, key: \"simulador-horarios\"},\n    (state = initialState, action) => {\n        switch (action.type) {\n            case types.Set: {\n                const newState = {...state};\n                newState[action.payload.name] = action.payload.content;\n                return newState;\n            }\n            case types.SetYears: {\n                const newState = {...state};\n                newState.year = action.payload;\n                return newState;\n            }\n            case types.ChangeYear: {\n                const newState = {...state};\n                newState.year.chosen = action.payload;\n                return newState;\n            }\n            case types.GetDepartments: {\n                const newState = {...state};\n                newState.loading = true;\n                return newState;\n            }\n            case types.SetDepartments: {\n                const newState = {...state};\n                newState.department = {\n                    ...state.department,\n                    all: action.payload\n                };\n                newState.loading = false;\n                return newState;\n            }\n            case types.SetDepartment: {\n                const newState = {...state};\n                newState.department = {\n                    ...state.department,\n                    chosen: action.payload\n                };\n                return newState;\n            }\n            case types.GetDepartmentSubjects: {\n                const newState = {...state};\n                newState.loading = true;\n                return newState;\n            }\n            case types.SetSubjects: {\n                const newState = {...state};\n                newState.subject = {\n                    ...state.subject,\n                    all: action.payload\n                };\n                newState.loading = false;\n                return newState;\n            }\n            case types.AddOrUpdateSubjects: {\n                const newState = {...state};\n                newState.loading = true;\n                return newState;\n            }\n            case types.AddSubjectDone: {\n                const newState = {...state};\n                let newChosen = {...state.subject.chosen};\n                newChosen[action.payload.id] = action.payload;\n                newState.subject = {\n                    ...state.subject,\n                    chosen: {...newChosen}\n                };\n                return newState;\n            }\n            case types.RemoveSubject: {\n                const newState = {...state};\n                let newChosen = {...state.subject.chosen};\n                delete newChosen[action.payload];\n                newState.subject = {\n                    ...state.subject,\n                    chosen: {...newChosen}\n                };\n                let newShifts = {...state.shifts};\n                delete newShifts[action.payload];\n                newState.shifts = {...newShifts};\n                return newState;\n            }\n            case types.AddOrUpdateShifts: {\n                const newState = {...state};\n                newState.shifts = {...state.shifts};\n                newState.shifts[action.payload.subject] = action.payload.shifts;\n                return newState;\n            }\n            case types.SaveClass: {\n                const newState = {...state};\n                const newClasses = {...state.classes};\n                if (!newClasses[action.payload.subject]) {\n                    newClasses[action.payload.subject] = {};\n                    newClasses[action.payload.subject].count = 1;\n                } else {\n                    newClasses[action.payload.subject].count++;\n                }\n                if (!newClasses[action.payload.subject][action.payload.type])\n                    newClasses[action.payload.subject][action.payload.type] = {};\n                newClasses[action.payload.subject][action.payload.type][action.payload.number] = {...state.shifts[action.payload.subject][action.payload.type][action.payload.number]};\n                newState.classes = newClasses;\n                return newState;\n            }\n            case types.RemoveClass: {\n                const newState = {...state};\n                const newClasses = {...state.classes};\n                newClasses[action.payload.subject].count--;\n                delete newClasses[action.payload.subject][action.payload.type][action.payload.number];\n                if (newClasses[action.payload.subject].count == 0)\n                    delete newClasses[action.payload.subject];\n                newState.classes = newClasses;\n                return newState;\n            }\n            case types.SetView: {\n                const newState = {...state};\n                newState.view = action.payload;\n                return newState;\n            }\n            default:\n                const newState = {...state};\n                newState.loading = false;\n                return newState;\n        }\n    }\n);\n\nexport const actions = {\n    init: () => ({ type: types.Init }),\n    set: (name, content) => ({ type: types.Set, payload: {name, content} }),\n    setYears: (years) => ({ type: types.SetYears, payload: years }),\n    changeYear: (year) => ({ type: types.ChangeYear, payload: year }),\n    getDepartments: () => ({ type: types.GetDepartments }),\n    setDepartments: (departments) => ({ type: types.SetDepartments, payload: departments }),\n    setDepartment: (department) => ({ type: types.SetDepartment, payload: department }),\n    getDepartmentSubjects: (department) => ({ type: types.GetDepartmentSubjects, payload: department }),\n    setSubjects: (subjects) => ({ type: types.SetSubjects, payload: subjects }),\n    addOrUpdateSubjects: (subjects) => ({ type: types.AddOrUpdateSubjects, payload: subjects }),\n    addSubjectDone: (subjectInfo) => ({ type: types.AddSubjectDone, payload: subjectInfo }),\n    removeSubject: (subject) => ({ type: types.RemoveSubject, payload: subject }),\n    addOrUpdateShifts: (subject, shifts) => ({ type: types.AddOrUpdateShifts, payload: {subject, shifts} }),\n    addClass: (subject, type, number) => ({ type: types.SaveClass, payload: {subject, type, number} }),\n    removeClass: (subject, type, number) => ({ type: types.RemoveClass, payload: {subject, type, number} }),\n    setView: (view) => ({ type: types.SetView, payload: view }),\n    nothing: () => ({ type: types.Nothing })\n};\n\nexport function* saga() {\n    yield takeLatest(types.Init, function* () {\n        const years = {\n            all: [],\n            chosen: new Date().getMonth() >= 9 ? new Date().getFullYear() + 1 : new Date().getFullYear()\n        }\n        for (let year = years.chosen; year >= 2015; year--)\n            years.all.push(year);\n        yield put(actions.setYears(years));\n        yield put(actions.getDepartments());\n\n        const classes = yield select(state => state.redux.classes);\n        if (Array.isArray(classes))\n            yield put(actions.set(\"classes\", {}));\n        const view = yield select(state => state.redux.view);\n        if (view != \"chosen\")\n            yield put(actions.set(\"view\", undefined));\n    });\n    yield takeLatest(types.GetDepartments, function* () {\n        const {data} = yield api.getDepartments();\n        yield put(actions.setDepartments(data));\n    });\n    yield takeLatest(types.SetDepartment, function* ({payload: department}) {\n        const {data} = yield api.getDepartmentSubjects(department);\n        yield put(actions.setSubjects(data.classes));\n    });\n    yield takeLatest(types.ChangeYear, function* ({payload: year}) {\n        const subjects = yield select(state => state.redux.subject.chosen);\n        yield put(actions.addOrUpdateSubjects(Object.keys(subjects)));\n    });\n    yield takeLatest(types.AddOrUpdateSubjects, function* ({payload: subjects}) {\n        let index = 0;\n        do {\n            let subject = Array.isArray(subjects) ? subjects[index++] : subjects;\n            if (subject > 0) {\n                const {data} = yield api.getSubject(subject);\n                let subjectInfo = data;\n                let instances = data.instances;\n                const year = yield select(state => state.redux.year.chosen);\n                let found = false;\n                let instance = undefined;\n                for (let index = 0; !found && index < instances.length; index++) {\n                    if (instances[index].year == year) {\n                        instance = instances[index].id;\n                        found = true;\n                    }\n                }\n                if (instance) {\n                    yield put(actions.addSubjectDone(subjectInfo));\n                    let infoSubject = {...subjectInfo};\n                    infoSubject.credits = infoSubject.credits / 2;\n                    delete infoSubject.instances;\n                    delete infoSubject.url;\n                    const {data} = yield api.getSubjectShifts(instance);\n                    const shiftsInformation = data;\n                    const shifts = {\n                        t: {},\n                        to: {},\n                        tp: {},\n                        tpo: {},\n                        p: {},\n                        po: {}\n                    };\n                    const {data: {building: {abbreviation}}} = yield api.getDepartmentSubjects(infoSubject.department.id);\n                    shiftsInformation.map(shift => {\n                        let infoShift = {...shift};\n                        delete infoShift.teachers;\n                        delete infoShift.url;\n                        for (let index = 0; index < infoShift.instances.length; index++) {\n                            infoShift.instances[index].duration = infoShift.instances[index].duration / 30;\n                            infoShift.instances[index].room = infoShift.instances[index].room ? abbreviation + \" \" + infoShift.instances[index].room : undefined;\n                        }\n                        let type = shift.type_display.indexOf(\"Teórico-Prático\") >= 0\n                            ? \"TP\"\n                            : shift.type_display.indexOf(\"Teórico\") >= 0\n                                ? \"T\"\n                                : \"P\";\n                        if (shift.type_display.indexOf(\"Online\") >= 0)\n                            type += \"O\";\n                        infoShift.type = {\n                            name: type,\n                            title: shift.type_display\n                        };\n                        delete infoShift.type_display;\n                        shifts[type.toLowerCase()][shift.number] = {\n                            subject: infoSubject,\n                            shift: infoShift\n                        };\n                    });\n                    yield put(actions.addOrUpdateShifts(subject, shifts));\n                } else {\n                    yield put(actions.removeSubject(subject));\n                }\n            }\n        } while (Array.isArray(subjects) && index <= subjects.length);\n        yield put(actions.nothing());\n    });\n}\n","import {all} from \"redux-saga/effects\";\nimport {combineReducers} from \"redux\";\n\nimport * as redux from \"./duck/redux.duck\";\n\nexport const rootReducer = combineReducers({\n    redux: redux.reducer\n});\n\nexport function* rootSaga() {\n    yield all([redux.saga()]);\n}\n","import {configureStore, getDefaultMiddleware} from \"@reduxjs/toolkit\";\nimport createSagaMiddleware from \"redux-saga\";\nimport {reduxBatch} from \"@manaflair/redux-batch\";\nimport {persistStore} from \"redux-persist\";\nimport {rootReducer, rootSaga} from \"./rootReducer\";\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middleware = [\n    ...getDefaultMiddleware({\n        immutableCheck: false,\n        serializableCheck: false,\n        thunk: true\n    }),\n    sagaMiddleware\n];\n\nconst store = configureStore({\n    reducer: rootReducer,\n    middleware,\n    devTools: process.env.NODE_ENV !== \"production\",\n    enhancers: [reduxBatch]\n});\n\n/**\n * @see https://github.com/rt2zz/redux-persist#persiststorestore-config-callback\n * @see https://github.com/rt2zz/redux-persist#persistor-object\n */\nexport const persistor = persistStore(store);\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import React from \"react\";\nimport \"./index.css\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {actions} from \"../../redux/duck/redux.duck\";\n\nconst TopMenu = ({name, logo, years, year, departments, department, subjects, subject}) => {\n    const dispatch = useDispatch();\n\n    const view = useSelector(state => state.redux.view);\n\n    const changeYear = (year) => {\n        dispatch(actions.changeYear(year));\n    };\n\n    const chooseDepartment = (department) => {\n        dispatch(actions.setDepartment(department));\n    };\n\n    const chooseSubject = (subject) => {\n        dispatch(actions.addOrUpdateSubjects(subject));\n    };\n\n    const removeSubject = (subject) => {\n        dispatch(actions.removeSubject(subject));\n    };\n\n    const setView = (view) => {\n        dispatch(actions.setView(view));\n    };\n\n    const chosenSubjects = Object.values(subject).sort((a, b) => {return a.abbreviation > b.abbreviation});\n\n    return <>\n        <div id=\"topMenu\">\n            <span>\n                <img src={logo} />\n                <h1>{name}</h1>\n            </span>\n            <span>\n                <select\n                    value={year}\n                    onChange={(event) => changeYear(event.target.value)}\n                >\n                    <option disabled selected>Escolher Ano Letivo</option>\n                    {\n                        years.map(year =>\n                            <option value={year}>{year}</option>\n                        )\n                    }\n                </select>\n                <select\n                    value={department}\n                    onChange={(event) => chooseDepartment(event.target.value)}\n                >\n                    <option disabled selected>Escolher Departamento</option>\n                    {\n                        departments.map(option =>\n                            <option value={option.id}>{option.name}</option>\n                        )\n                    }\n                </select>\n                <select\n                    onChange={(event) => chooseSubject(event.target.value)}\n                >\n                    <option value={-1} selected>Adicionar Cadeira</option>\n                    {\n                        subjects.map(option =>\n                            subject[option.id]\n                                ? <></>\n                                : <option value={option.id}>{option.name}</option>\n                        )\n                    }\n                </select>\n            </span>\n        </div>\n        <div id=\"subTopMenu\">\n            <div id=\"subjects\">\n                {\n                    chosenSubjects.map(obj =>\n                        <div title={obj.name}>\n                            {obj.abbreviation}\n                            <span onClick={() => removeSubject(obj.id)}>X</span>\n                        </div>\n                    )\n                }\n            </div>\n            <div id=\"menu\">\n                <div className=\"option\" id=\"update\" onClick={() => changeYear(year)}><span>&#8634; Atualizar</span></div>\n                <div id=\"view\">\n                    <span className={view == undefined ? \"active\" : \"\"} onClick={() => setView(undefined)}>Escolher</span>\n                    <span className={view == \"chosen\" ? \"active\" : \"\"} onClick={() => setView(\"chosen\")}>Escolhido</span>\n                </div>\n            </div>\n        </div>\n    </>\n};\n\nexport default TopMenu;","const conf = {\n    name: \"Simulador de Horários\",\n    logo: \"./logo.png\"\n};\n\nexport default conf;","import React from \"react\";\nimport TopMenu from \"../component/topMenu\";\nimport conf from \"../conf\";\nimport {useSelector} from \"react-redux\";\n\nconst TopMenuContainer = () => {\n    const years = useSelector(state => state.redux.year.all);\n    const year = useSelector(state => state.redux.year.chosen);\n    const departments = useSelector(state => state.redux.department.all);\n    const department = useSelector(state => state.redux.department.chosen);\n    const subjects = useSelector(state => state.redux.subject.all);\n    const subject = useSelector(state => state.redux.subject.chosen);\n\n    return <TopMenu\n        name={conf.name}\n        logo={conf.logo}\n        years={years}\n        year={year}\n        departments={departments}\n        department={department}\n        subjects={subjects}\n        subject={subject}\n    />\n};\n\nexport default TopMenuContainer;","import React from \"react\";\nimport \"./index.css\";\n\nconst ElementTD = ({times}) => {\n    let elements = [];\n    for (let time = 0; time < times - 1; time++)\n        elements.push(1);\n\n    console.log(elements)\n    return <>{\n        elements.map(obj => <td></td>)\n    }\n        <td className=\"with-right-border\"></td>\n    </>\n};\n\nexport default ElementTD;","import React from \"react\";\nimport \"./index.css\";\nimport $ from \"jquery\";\nimport {actions} from \"../../redux/duck/redux.duck\";\nimport {useDispatch} from \"react-redux\";\nimport ElementTD from \"../elementTd\";\n\nconst Timetable = ({maxClasses, hours, classes, filled, chosenClasses}) => {\n    const dispatch = useDispatch();\n\n    const onMouseOver = (id) => {\n        $(\".\" + id).addClass(\"hover\");\n    };\n\n    const onMouseLeave = (id) => {\n        $(\".\" + id).removeClass(\"hover\");\n    };\n\n    const saveOrRemoveClass = (subject, type, number) => {\n        if (chosenClasses[subject] && chosenClasses[subject][type] && chosenClasses[subject][type][number])\n            dispatch(actions.removeClass(subject, type, number));\n        else\n            dispatch(actions.addClass(subject, type, number));\n    };\n\n    return <>\n        <table id=\"timetable\" className=\"timetable\">\n            <thead>\n                <tr>\n                    <th>Hora</th>\n                    <th colSpan={maxClasses[0]}>2ª</th>\n                    <th colSpan={maxClasses[1]}>3ª</th>\n                    <th colSpan={maxClasses[2]}>4ª</th>\n                    <th colSpan={maxClasses[3]}>5ª</th>\n                    <th colSpan={maxClasses[4]}>6ª</th>\n                </tr>\n            </thead>\n            <tbody>\n            {\n                hours.map(hour => <tr>\n                    <td>{\n                        (hour/60).toString().indexOf(\".5\") == -1\n                            ? parseInt(hour/60) < 10\n                                ? \"0\" + parseInt(hour/60)\n                                : parseInt(hour/60)\n                            : parseInt(hour/60)+1 < 10\n                                ? \"0\" + (parseInt(hour/60)+1)\n                                : (parseInt(hour/60)+1)\n\n                    }:00</td>\n                        {\n                            [0, 1, 2, 3, 4].map(day => <>\n                                {\n                                    filled[hours.indexOf(hour)][day]\n                                        ? classes[hours.indexOf(hour)][day].sort(\n                                            (a, b) => {\n                                                if (a.subject.abbreviation != b.subject.abbreviation)\n                                                    return a.subject.abbreviation > b.subject.abbreviation;\n                                                else\n                                                    return a.shift.number > b.shift.number;\n                                            }\n                                        ).map(shiftInfo =>\n                                            <td\n                                                rowSpan={shiftInfo.shift.duration} className={`class ${shiftInfo.shift.type.name.toLowerCase()} ${shiftInfo.subject.id}-${shiftInfo.shift.type.name.toLowerCase()}-${shiftInfo.shift.number}`}\n                                                onMouseOver={() => onMouseOver(shiftInfo.subject.id + \"-\" + shiftInfo.shift.type.name.toLowerCase() + \"-\" + shiftInfo.shift.number)}\n                                                onMouseLeave={() => onMouseLeave(shiftInfo.subject.id + \"-\" + shiftInfo.shift.type.name.toLowerCase() + \"-\" + shiftInfo.shift.number)}\n                                            >\n                                                {\n                                                        chosenClasses[shiftInfo.subject.id] && chosenClasses[shiftInfo.subject.id][shiftInfo.shift.type.name.toLowerCase()] && chosenClasses[shiftInfo.subject.id][shiftInfo.shift.type.name.toLowerCase()][shiftInfo.shift.number]\n                                                            ? <div className=\"save\" title=\"Remover\"\n                                                                   onClick={() => saveOrRemoveClass(shiftInfo.subject.id, shiftInfo.shift.type.name.toLowerCase(), shiftInfo.shift.number)}>X</div>\n                                                            : <div className=\"save\" title=\"Guardar\"\n                                                                   onClick={() => saveOrRemoveClass(shiftInfo.subject.id, shiftInfo.shift.type.name.toLowerCase(), shiftInfo.shift.number)}>&#9733;</div>\n                                                }\n                                                <h3><span title={shiftInfo.subject.name}>{shiftInfo.subject.abbreviation}</span></h3>\n                                                <p><span title={shiftInfo.shift.type.title + \" \" + shiftInfo.shift.number}>{shiftInfo.shift.type.name} {shiftInfo.shift.number}</span><br />{shiftInfo.shift.room}</p>\n                                            </td>\n                                        )\n                                        : <ElementTD times={maxClasses[day] - filled[hours.indexOf(hour)][day]} />\n                                }\n                                {\n                                    maxClasses[day] > filled[hours.indexOf(hour)][day] && filled[hours.indexOf(hour)][day]\n                                        ? <ElementTD times={maxClasses[day] - filled[hours.indexOf(hour)][day]} />\n                                        : <></>\n                                }\n                                </>\n                            )\n                        }\n                </tr>\n                )\n            }\n            </tbody>\n        </table>\n    </>\n};\n\nexport default Timetable;","import React from \"react\";\nimport Timetable from \"../component/timetable\";\nimport {useSelector} from \"react-redux\";\n\nconst ContentContainer = () => {\n    const shifts = useSelector(state => state.redux.shifts);\n    const chosenClasses = useSelector(state => state.redux.classes);\n    const view = useSelector(state => state.redux.view);\n\n    const hours = [];\n    for (let current = 8; current <= 23.5; current = current + 0.5)\n        hours.push(current * 60);\n\n    const classes = [];\n    const filled = [];\n    hours.map(() => {\n        let hour1 = [];\n        let hour2 = [];\n        [1, 2, 3, 4, 5].map(() => {\n            hour1.push([]);\n            hour2.push(0);\n        })\n        classes.push(hour1);\n        filled.push(hour2);\n    });\n\n    const maxClasses = [1, 1, 1, 1, 1];\n\n    let showShifts = view == \"chosen\" ? chosenClasses : shifts;\n\n    Object.keys(showShifts).map(subject => {\n        Object.keys(showShifts[subject]).map(type => {\n            Object.keys(showShifts[subject][type]).map(number => {\n                    let shiftInfo = showShifts[subject][type][number];\n                    shiftInfo.shift.instances.map(instance => {\n                        classes[hours.indexOf(instance.start)][instance.weekday].push({\n                            subject: shiftInfo.subject,\n                            shift: {\n                                ...instance,\n                                number: shiftInfo.shift.number,\n                                type: shiftInfo.shift.type\n                            }\n                        });\n                        for (let hour = hours.indexOf(instance.start); hour < hours.indexOf(instance.start) + (instance.duration); hour++) {\n                            filled[hour][instance.weekday]++;\n                            maxClasses[instance.weekday] = Math.max(maxClasses[instance.weekday], filled[hour][instance.weekday]);\n                        }\n                    });\n                }\n            )\n        });\n    });\n\n    return <div id=\"content\">\n        <Timetable\n            maxClasses={maxClasses}\n            hours={hours}\n            classes={classes}\n            filled={filled}\n            chosenClasses={chosenClasses}\n        />\n    </div>\n};\n\nexport default ContentContainer;","import React from \"react\";\nimport \"./index.css\";\n\nconst Loader = () => {\n    return <div className=\"loaderContainer\">\n        <div className=\"loader\"></div>\n    </div>\n};\n\nexport default Loader;","import React, {useEffect} from \"react\";\nimport TopMenuContainer from \"./topMenu\";\nimport ContentContainer from \"./content\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {actions} from \"../redux/duck/redux.duck\";\nimport Loader from \"../component/loader\";\n\nconst PageContainer = () => {\n    const dispatch = useDispatch();\n    const loading = useSelector(state => state.redux.loading);\n\n    useEffect(\n        () => {\n            dispatch(actions.init());\n        },\n        []\n    );\n\n    return <>\n        <TopMenuContainer />\n        <ContentContainer />\n        {\n            loading ? <Loader /> : <></>\n        }\n    </>\n};\n\nexport default PageContainer;","import React from 'react';\nimport axios from \"axios\";\nimport * as _redux from \"./redux\";\nimport store, {persistor} from \"./redux/store\";\nimport {Provider} from \"react-redux\";\nimport {PersistGate} from \"redux-persist/integration/react\";\nimport './App.css';\nimport PageContainer from \"./container/page\";\nimport \"./component/global.css\";\n\nfunction App() {\n    _redux.setupAxios(axios, store);\n\n    return (\n        <Provider store={store}>\n            <PersistGate persistor={persistor} loading={null}>\n                <PageContainer />\n            </PersistGate>\n        </Provider>\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}