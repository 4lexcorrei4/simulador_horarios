{"version":3,"sources":["redux/api/urls.js","redux/api/api.js","redux/duck/redux.duck.js","redux/rootReducer.js","redux/store.js","component/topMenu/index.js","conf/index.js","container/topMenu.js","component/loader/index.js","component/timetable/index.js","container/content.js","container/page.js","App.js","reportWebVitals.js","index.js"],"names":["urls","base","departments","departmentSubjects","depId","subject","subjectShifts","instance","getDepartmentSubjects","department","axios","get","getSubject","getSubjectShifts","saga","types","initialState","time","all","chosen","undefined","shifts","loading","reducer","persistReducer","storage","key","state","action","type","newState","payload","newChosen","id","newShifts","actions","subjects","subjectInfo","takeLatest","put","data","api","classes","select","redux","Object","keys","index","added","Array","isArray","instances","year","found","length","infoSubject","credits","url","shiftsInformation","t","tp","p","abbreviation","building","map","shift","infoShift","teachers","duration","room","type_display","indexOf","name","title","toLowerCase","number","rootSaga","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","middleware","getDefaultMiddleware","immutableCheck","serializableCheck","thunk","store","configureStore","devTools","process","enhancers","reduxBatch","persistor","persistStore","run","TopMenu","logo","times","dispatch","useDispatch","useSelector","chooseTime","chosenSubjects","values","sort","a","b","src","value","onChange","event","target","disabled","selected","chooseDepartment","option","chooseSubject","obj","onClick","removeSubject","conf","TopMenuContainer","Loader","className","Timetable","hours","current","push","filled","hour1","hour2","maxClasses","shiftInfo","start","weekday","hour","Math","max","colSpan","toString","parseInt","day","rowSpan","ContentContainer","PageContainer","useEffect","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8ZAAMA,EAAO,CACTC,KAAM,iBAAM,6CACZC,YAAa,kBAAMF,EAAKC,OAAS,gBACjCE,mBAAoB,SAACC,GAAD,OAAWJ,EAAKC,OAAS,eAAiBG,GAC9DC,QAAS,SAACA,GAAD,OAAaL,EAAKC,OAAS,UAAYI,GAChDC,cAAe,SAACC,GAAD,OAAcP,EAAKC,OAAS,YAAcM,EAAW,YAGzDP,ICDR,SAASQ,EAAsBC,GAClC,OAAOC,IAAMC,IAAIX,EAAKG,mBAAmBM,IAGtC,SAASG,EAAWP,GACvB,OAAOK,IAAMC,IAAIX,EAAKK,QAAQA,IAG3B,SAASQ,EAAiBN,GAC7B,OAAOG,IAAMC,IAAIX,EAAKM,cAAcC,I,eCoIvBO,GA1IJC,EACH,eADGA,EAEA,kBAFAA,EAGO,yBAHPA,EAIO,yBAJPA,EAKM,wBALNA,EAMc,gCANdA,EAOI,sBAPJA,EAQY,8BARZA,EASO,yBATPA,EAUM,wBAVNA,EAWU,4BAXVA,EAYA,kBAGPC,EAAe,CACjBC,KAAM,CACFC,IAAK,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC1CC,OAAQ,MAEZV,WAAY,CACRS,IAAK,GACLC,YAAQC,GAEZf,QAAS,CACLa,IAAK,GACLC,OAAQ,IAEZE,OAAQ,GACRC,SAAS,GAGAC,EAAUC,YACnB,CAACC,YAASC,IAAK,uBACf,WAAmC,IAAlCC,EAAiC,uDAAzBX,EAAcY,EAAW,uCAC9B,OAAQA,EAAOC,MACX,KAAKd,EACD,IAAMe,EAAQ,eAAOH,GAKrB,OAJAG,EAASb,KAAT,2BACOU,EAAMV,MADb,IAEIE,OAAQS,EAAOG,UAEZD,EAEX,KAAKf,EACD,IAAMe,EAAQ,eAAOH,GAErB,OADAG,EAASR,SAAU,EACZQ,EAEX,KAAKf,EACD,IAAMe,EAAQ,eAAOH,GAMrB,OALAG,EAASrB,WAAT,2BACOkB,EAAMlB,YADb,IAEIS,IAAKU,EAAOG,UAEhBD,EAASR,SAAU,EACZQ,EAEX,KAAKf,EACD,IAAMe,EAAQ,eAAOH,GAKrB,OAJAG,EAASrB,WAAT,2BACOkB,EAAMlB,YADb,IAEIU,OAAQS,EAAOG,UAEZD,EAEX,KAAKf,EACD,IAAMe,EAAQ,eAAOH,GAErB,OADAG,EAASR,SAAU,EACZQ,EAEX,KAAKf,EACD,IAAMe,EAAQ,eAAOH,GAMrB,OALAG,EAASzB,QAAT,2BACOsB,EAAMtB,SADb,IAEIa,IAAKU,EAAOG,UAEhBD,EAASR,SAAU,EACZQ,EAEX,KAAKf,EACD,IAAMe,EAAQ,eAAOH,GAErB,OADAG,EAASR,SAAU,EACZQ,EAEX,KAAKf,EACD,IAAMe,EAAQ,eAAOH,GACjBK,EAAS,eAAOL,EAAMtB,QAAQc,QAMlC,OALAa,EAAUJ,EAAOG,QAAQE,IAAML,EAAOG,QACtCD,EAASzB,QAAT,2BACOsB,EAAMtB,SADb,IAEIc,OAAO,eAAKa,KAETF,EAEX,KAAKf,EACD,IAAMe,EAAQ,eAAOH,GACjBK,EAAS,eAAOL,EAAMtB,QAAQc,eAC3Ba,EAAUJ,EAAOG,SACxBD,EAASzB,QAAT,2BACOsB,EAAMtB,SADb,IAEIc,OAAO,eAAKa,KAEhB,IAAIE,EAAS,eAAOP,EAAMN,QAG1B,cAFOa,EAAUN,EAAOG,SACxBD,EAAST,OAAT,eAAsBa,GACfJ,EAEX,KAAKf,EACD,IAAMe,EAAQ,eAAOH,GAIrB,OAHAG,EAAST,OAAT,eAAsBM,EAAMN,QAC5BS,EAAST,OAAOO,EAAOG,QAAQ1B,SAAWuB,EAAOG,QAAQV,OACzDS,EAASR,SAAU,EACZQ,EAEX,QACI,IAAMA,EAAQ,eAAOH,GAErB,OADAG,EAASR,SAAU,EACZQ,MAKVK,EACH,iBAAO,CAAEN,KAAMd,IADZoB,EAEA,SAAClB,GAAD,MAAW,CAAEY,KAAMd,EAAegB,QAASd,IAF3CkB,EAGO,iBAAO,CAAEN,KAAMd,IAHtBoB,EAIO,SAACjC,GAAD,MAAkB,CAAE2B,KAAMd,EAAsBgB,QAAS7B,IAJhEiC,EAKM,SAAC1B,GAAD,MAAiB,CAAEoB,KAAMd,EAAqBgB,QAAStB,IAL7D0B,EAOI,SAACC,GAAD,MAAe,CAAEP,KAAMd,EAAmBgB,QAASK,IAPvDD,EAQY,SAACC,GAAD,MAAe,CAAEP,KAAMd,EAA2BgB,QAASK,IARvED,EASO,SAACE,GAAD,MAAkB,CAAER,KAAMd,EAAsBgB,QAASM,IAThEF,EAUM,SAAC9B,GAAD,MAAc,CAAEwB,KAAMd,EAAqBgB,QAAS1B,IAV1D8B,EAWU,SAAC9B,EAASgB,GAAV,MAAsB,CAAEQ,KAAMd,EAAyBgB,QAAS,CAAC1B,UAASgB,YAXpFc,EAYA,iBAAO,CAAEN,KAAMd,IAGrB,SAAUD,IAAV,iEACH,OADG,SACGwB,YAAWvB,EAAD,UAAa,8EACzB,OADyB,SACnBwB,YAAIJ,KADe,2CAD1B,OAIH,OAJG,SAIGG,YAAWvB,EAAD,UAAuB,sFACpB,OADoB,SDpJhCL,IAAMC,IAAIX,EAAKE,eCoJiB,OAEnC,OAFmC,SAC5BsC,EAD4B,EAC5BA,KAD4B,SAE7BD,YAAIJ,EAAuBK,IAFE,2CAJpC,OAQH,OARG,SAQGF,YAAWvB,EAAD,UAAsB,yFACnB,OADwCN,EAArB,EAAYsB,QAAZ,SACbU,EAA0BhC,GADb,OAElC,OAFkC,SAC3B+B,EAD2B,EAC3BA,KAD2B,SAE5BD,YAAIJ,EAAoBK,EAAKE,UAFD,2CARnC,OAYH,OAZG,SAYGJ,YAAWvB,EAAD,UAAgB,qFACX,OADW,EAAYgB,QAAZ,SACLY,aAAO,SAAAhB,GAAK,OAAIA,EAAMiB,MAAMvC,QAAQc,UAD/B,OAE5B,OADMiB,EADsB,gBAEtBG,YAAIJ,EAA4BU,OAAOC,KAAKV,KAFtB,2CAZ7B,OAgBH,OAhBG,UAgBGE,YAAWvB,EAAD,UAA4B,2GAAqBqB,EAArB,EAAYL,QAChDgB,EAAQ,EACRC,EAAQ,EAF4B,aAIhC3C,EAAU4C,MAAMC,QAAQd,GAAYA,EAASW,KAAWX,GAC9C,GALsB,iBAMjB,OANiB,SAMXK,EAAepC,GANJ,OASnB,OATmB,SAMzBmC,EANyB,EAMzBA,KACHH,EAAcG,EACdW,EAAYX,EAAKW,UARW,UASbR,aAAO,SAAAhB,GAAK,OAAIA,EAAMiB,MAAM3B,KAAKE,UATpB,QAYhC,IAHMiC,EAT0B,OAU5BC,GAAQ,EACR9C,OAAWa,EACN2B,EAAQ,GAAIM,GAASN,EAAQI,EAAUG,OAAQP,IAChDI,EAAUJ,GAAOK,MAAQA,IACzB7C,EAAW4C,EAAUJ,GAAOd,GAC5BoB,GAAQ,GAfgB,IAkB5B9C,EAlB4B,kJAmB5B,OAnB4B,SAmBtBgC,YAAIJ,EAAuBE,IAnBL,OAwBb,OAJXkB,EApBwB,eAoBNlB,IACVmB,QAAUD,EAAYC,QAAU,SACrCD,EAAYJ,iBACZI,EAAYE,IAvBS,SAwBPhB,EAAqBlC,GAxBd,OA+Be,OA/Bf,SAwBrBiC,EAxBqB,EAwBrBA,KACDkB,EAAoBlB,EACpBnB,EAAS,CACXsC,EAAG,GACHC,GAAI,GACJC,EAAG,IA7BqB,UA+BqBpB,EAA0Bc,EAAY9C,WAAWwB,IA/BtE,QAuD5B,OAvD4B,SA+BH6B,EA/BG,EA+BrBtB,KAAOuB,SAAWD,aACzBJ,EAAkBM,KAAI,SAAAC,GAClB,IAAIC,EAAS,eAAOD,UACbC,EAAUC,gBACVD,EAAUT,IACjB,IAAK,IAAIV,EAAQ,EAAGA,EAAQmB,EAAUf,UAAUG,OAAQP,IACpDmB,EAAUf,UAAUJ,GAAOqB,SAAWF,EAAUf,UAAUJ,GAAOqB,SAAW,GAC5EF,EAAUf,UAAUJ,GAAOsB,KAAOH,EAAUf,UAAUJ,GAAOsB,KAAOP,EAAe,IAAMI,EAAUf,UAAUJ,GAAOsB,KAAO,IAE/H,IAAIxC,EAAOoC,EAAMK,aAAaC,QAAQ,0BAAsB,EACtD,KACAN,EAAMK,aAAaC,QAAQ,eAAc,EACrC,IACA,IACVL,EAAUrC,KAAO,CACb2C,KAAM3C,EACN4C,MAAOR,EAAMK,qBAEVJ,EAAUI,aACjBjD,EAAOQ,EAAK6C,eAAeT,EAAMU,QAAU,CACvCtE,QAASkD,EACTU,MAAOC,MApDa,UAuDtB3B,YAAIJ,EAA0B9B,EAASgB,IAvDjB,QAwD5B2B,IAxD4B,sFA0D5B,OA1D4B,UA0DtBT,YAAIJ,EAAsB9B,IA1DJ,WA6D/B4C,MAAMC,QAAQd,IAAaW,GAASX,EAASkB,OA7Dd,2BA8D3B,GAATN,EA9DoC,iBA+DpC,OA/DoC,UA+D9BT,YAAIJ,KA/D0B,4CAhBzC,wC,eC3IUyC,IAJJC,GAAcC,YAAgB,CACvClC,MAAOA,IAGJ,SAAUgC,KAAV,iEACH,OADG,SACG1D,YAAI,CAAC0B,MADR,uCCHP,IAAMmC,GAAiBC,cACjBC,GAAU,sBACTC,YAAqB,CACpBC,gBAAgB,EAChBC,mBAAmB,EACnBC,OAAO,KAJC,CAMZN,KAGEO,GAAQC,YAAe,CACzBhE,QAASsD,GACTI,cACAO,UAAUC,EACVC,UAAW,CAACC,gBAOHC,GAAYC,YAAaP,IAEtCP,GAAee,IAAIlB,IAEJU,U,uCCwDAS,GAlFC,SAAC,GAA2E,IAA1EvB,EAAyE,EAAzEA,KAAMwB,EAAmE,EAAnEA,KAAMC,EAA6D,EAA7DA,MAAOhF,EAAsD,EAAtDA,KAAMf,EAAgD,EAAhDA,YAAaO,EAAmC,EAAnCA,WAAY2B,EAAuB,EAAvBA,SAAU/B,EAAa,EAAbA,QACpE6F,EAAWC,eAEX/C,EAAOgD,cAAY,SAAAzE,GAAK,OAAIA,EAAMiB,MAAM3B,KAAKE,UAE7CkF,EAAa,SAACpF,GAChBiF,EAAS/D,EAAgBlB,KAevBqF,EAAiBzD,OAAO0D,OAAOlG,GAASmG,MAAK,SAACC,EAAGC,GAAO,OAAOD,EAAE3C,aAAe4C,EAAE5C,gBAExF,OAAO,uCACH,uBAAK7B,GAAG,UAAR,UACI,kCACI,sBAAK0E,IAAKX,IACV,8BAAKxB,OAET,kCACI,0BACIoC,MAAO3F,EACP4F,SAAU,SAACC,GAAD,OAAWT,EAAWS,EAAMC,OAAOH,QAFjD,UAII,yBAAQI,UAAQ,EAACC,UAAQ,EAAzB,wCAEIhB,EAAMjC,KAAI,SAAAZ,GAAI,OACV,yBAAQwD,MAAOxD,EAAf,SAAsBA,UAIlC,0BACIwD,MAAOnG,EACPoG,SAAU,SAACC,GAAD,OAlCD,SAACrG,GACtByF,EAAS/D,EAAsB1B,IAiCEyG,CAAiBJ,EAAMC,OAAOH,QAFvD,UAII,yBAAQI,UAAQ,EAACC,UAAQ,EAAzB,mCAEI/G,EAAY8D,KAAI,SAAAmD,GAAM,OAClB,yBAAQP,MAAOO,EAAOlF,GAAtB,SAA2BkF,EAAO3C,aAI9C,0BACIqC,SAAU,SAACC,GAAD,OAxCJ,SAACzG,GACnB6F,EAAS/D,EAA4B9B,IAuCJ+G,CAAcN,EAAMC,OAAOH,QADpD,UAGI,yBAAQA,OAAQ,EAAGK,UAAQ,EAA3B,+BAEI7E,EAAS4B,KAAI,SAAAmD,GAAM,OACf9G,EAAQ8G,EAAOlF,IACT,+BACA,yBAAQ2E,MAAOO,EAAOlF,GAAtB,SAA2BkF,EAAO3C,mBAM5D,uBAAKvC,GAAG,aAAR,UACI,sBAAKA,GAAG,WAAR,SAEQqE,EAAetC,KAAI,SAAAqD,GAAG,OAClB,uBAAK5C,MAAO4C,EAAI7C,KAAhB,UACK6C,EAAIvD,aACL,uBAAMwD,QAAS,kBAvDjB,SAACjH,GACnB6F,EAAS/D,EAAsB9B,IAsDUkH,CAAcF,EAAIpF,KAAvC,uBAKhB,sBAAKA,GAAG,SAASqF,QAAS,kBAAMjB,EAAWjD,IAA3C,qCC7EGoE,GALF,CACThD,KAAM,2BACNwB,KAAM,cCuBKyB,GApBU,WACrB,IAAMxB,EAAQG,cAAY,SAAAzE,GAAK,OAAIA,EAAMiB,MAAM3B,KAAKC,OAC9CD,EAAOmF,cAAY,SAAAzE,GAAK,OAAIA,EAAMiB,MAAM3B,KAAKE,UAC7CjB,EAAckG,cAAY,SAAAzE,GAAK,OAAIA,EAAMiB,MAAMnC,WAAWS,OAC1DT,EAAa2F,cAAY,SAAAzE,GAAK,OAAIA,EAAMiB,MAAMnC,WAAWU,UACzDiB,EAAWgE,cAAY,SAAAzE,GAAK,OAAIA,EAAMiB,MAAMvC,QAAQa,OACpDb,EAAU+F,cAAY,SAAAzE,GAAK,OAAIA,EAAMiB,MAAMvC,QAAQc,UAEzD,OAAO,eAAC,GAAD,CACHqD,KAAMgD,GAAKhD,KACXwB,KAAMwB,GAAKxB,KACXC,MAAOA,EACPhF,KAAMA,EACNf,YAAaA,EACbO,WAAYA,EACZ2B,SAAUA,EACV/B,QAASA,KCZFqH,I,YANA,WACX,OAAO,sBAAKC,UAAU,kBAAf,SACH,sBAAKA,UAAU,eCgHRC,GAhHG,SAAC,GAEf,IAFuC,IAAvBvG,EAAsB,EAAtBA,OACVwG,GADgC,EAAdzF,SACV,IACL0F,EAAU,EAAGA,GAAW,KAAMA,GAAoB,GACvDD,EAAME,KAAe,GAAVD,GAEf,IAAMpF,EAAU,GACVsF,EAAS,GACfH,EAAM7D,KAAI,WACN,IAAIiE,EAAQ,GACRC,EAAQ,GACZ,CAAC,EAAG,EAAG,EAAG,EAAG,GAAGlE,KAAI,WAChBiE,EAAMF,KAAK,IACXG,EAAMH,KAAK,MAEfrF,EAAQqF,KAAKE,GACbD,EAAOD,KAAKG,MAGhB,IAAMC,EAAa,CAAC,EAAG,EAAG,EAAG,EAAG,GAyBhC,OAvBAtF,OAAOC,KAAKzB,GAAQ2C,KAAI,SAAA3D,GACpBwC,OAAOC,KAAKzB,EAAOhB,IAAU2D,KAAI,SAAAnC,GAC7BgB,OAAOC,KAAKzB,EAAOhB,GAASwB,IAAOmC,KAAI,SAAAW,GAC/B,IAAIyD,EAAY/G,EAAOhB,GAASwB,GAAM8C,GACtCyD,EAAUnE,MAAMd,UAAUa,KAAI,SAAAzD,GAC1BmC,EAAQmF,EAAMtD,QAAQhE,EAAS8H,QAAQ9H,EAAS+H,SAASP,KAAK,CAC1D1H,QAAS+H,EAAU/H,QACnB4D,MAAM,2BACC1D,GADF,IAEDoE,OAAQyD,EAAUnE,MAAMU,OACxB9C,KAAMuG,EAAUnE,MAAMpC,SAG9B,IAAK,IAAI0G,EAAOV,EAAMtD,QAAQhE,EAAS8H,OAAQE,EAAOV,EAAMtD,QAAQhE,EAAS8H,OAAU9H,EAAS6D,SAAWmE,IACvGP,EAAOO,GAAMhI,EAAS+H,WACtBH,EAAW5H,EAAS+H,SAAWE,KAAKC,IAAIN,EAAW5H,EAAS+H,SAAUN,EAAOO,GAAMhI,EAAS+H,sBAQ7G,qCACH,yBAAOX,UAAU,YAAjB,UACI,iCACI,gCACI,uCACA,qBAAIe,QAASP,EAAW,GAAxB,mBACA,qBAAIO,QAASP,EAAW,GAAxB,mBACA,qBAAIO,QAASP,EAAW,GAAxB,mBACA,qBAAIO,QAASP,EAAW,GAAxB,mBACA,qBAAIO,QAASP,EAAW,GAAxB,wBAGR,iCAEIN,EAAM7D,KAAI,SAAAuE,GAAI,OAAI,gCACd,iCAC2C,IAAtCA,EAAK,IAAII,WAAWpE,QAAQ,MACvBqE,SAASL,EAAK,IAAM,GAChB,IAAMK,SAASL,EAAK,IACpBK,SAASL,EAAK,IAClBK,SAASL,EAAK,IAAI,EAAI,GAClB,KAAOK,SAASL,EAAK,IAAI,GACxBK,SAASL,EAAK,IAAI,EAPjC,SAWQ,CAAC,EAAG,EAAG,EAAG,EAAG,GAAGvE,KAAI,SAAA6E,GAAG,OAAI,uCAEnBb,EAAOH,EAAMtD,QAAQgE,IAAOM,GACtBnG,EAAQmF,EAAMtD,QAAQgE,IAAOM,GAAKrC,MAChC,SAACC,EAAGC,GACA,OAAID,EAAEpG,QAAQyD,cAAgB4C,EAAErG,QAAQyD,aAC7B2C,EAAEpG,QAAQyD,aAAe4C,EAAErG,QAAQyD,aAEnC2C,EAAExC,MAAMU,OAAS+B,EAAEzC,MAAMU,UAE1CX,KAAI,SAAAoE,GAAS,OACX,sBAAIU,QAASV,EAAUnE,MAAMG,SAAUuD,UAAS,gBAAWS,EAAUnE,MAAMpC,KAAK2C,KAAKE,eAArF,UACI,8BAAI,uBAAMD,MAAO2D,EAAU/H,QAAQmE,KAA/B,SAAsC4D,EAAU/H,QAAQyD,iBAC5D,+BAAG,wBAAMW,MAAO2D,EAAUnE,MAAMpC,KAAK4C,MAAQ,IAAM2D,EAAUnE,MAAMU,OAAhE,UAAyEyD,EAAUnE,MAAMpC,KAAK2C,KAA9F,IAAqG4D,EAAUnE,MAAMU,UAAc,wBAAOyD,EAAUnE,MAAMI,cAGnK,qBAAIqE,QAASP,EAAWU,GAAOb,EAAOH,EAAMtD,QAAQgE,IAAOM,KAGjEV,EAAWU,GAAOb,EAAOH,EAAMtD,QAAQgE,IAAOM,IAAQb,EAAOH,EAAMtD,QAAQgE,IAAOM,GAC5E,qBAAIH,QAASP,EAAWU,GAAOb,EAAOH,EAAMtD,QAAQgE,IAAOM,KAC3D,mDClF3BE,GATU,WACrB,IAAM1H,EAAS+E,cAAY,SAAAzE,GAAK,OAAIA,EAAMiB,MAAMvB,UAC1Ce,EAAWgE,cAAY,SAAAzE,GAAK,OAAIA,EAAMiB,MAAMvC,QAAQc,UAE1D,OAAO,sBAAKc,GAAG,UAAR,SACH,eAAC,GAAD,CAAWZ,OAAQA,EAAQe,SAAUA,OCkB9B4G,GApBO,WAClB,IAAM9C,EAAWC,eACX7E,EAAU8E,cAAY,SAAAzE,GAAK,OAAIA,EAAMiB,MAAMtB,WASjD,OAPA2H,qBACI,WACI/C,EAAS/D,OAEb,IAGG,uCACH,eAAC,GAAD,IACA,eAAC,GAAD,IAEIb,EAAU,eAAC,GAAD,IAAa,mC,MCApB4H,OAZf,WAGI,OAFkBxI,IAGd,eAAC,KAAD,CAAU4E,MAAOA,GAAjB,SACI,eAAC,KAAD,CAAaM,UAAWA,GAAWtE,QAAS,KAA5C,SACI,eAAC,GAAD,SCJD6H,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,eAAC,IAAMC,WAAP,UACE,eAAC,GAAD,MAEFC,SAASC,eAAe,SAM1Bb,O","file":"static/js/main.7e1263f7.chunk.js","sourcesContent":["const urls = {\n    base: () => \"https://api.horarios.bitsys.tech/get?url=\",\n    departments: () => urls.base() + \"/departments\",\n    departmentSubjects: (depId) => urls.base() + \"/department/\" + depId,\n    subject: (subject) => urls.base() + \"/class/\" + subject,\n    subjectShifts: (instance) => urls.base() + \"/class/i/\" + instance + \"/shifts\"\n};\n\nexport default urls;","import axios from \"axios\";\nimport urls from \"./urls\";\n\nexport function getDepartments() {\n    return axios.get(urls.departments());\n}\n\nexport function getDepartmentSubjects(department) {\n    return axios.get(urls.departmentSubjects(department));\n}\n\nexport function getSubject(subject) {\n    return axios.get(urls.subject(subject));\n}\n\nexport function getSubjectShifts(instance) {\n    return axios.get(urls.subjectShifts(instance));\n}","import {put, takeLatest, select, all} from \"redux-saga/effects\";\nimport {persistReducer} from \"redux-persist\";\nimport {useHistory} from \"react-router-dom\";\nimport storage from \"redux-persist/lib/storage\";\nimport * as api from \"../api/api\";\n//import Swal from \"sweetalert2\";\n//import withReactContent from \"sweetalert2-react-content\";\n\n//const swal = withReactContent(Swal);\n\nexport const types = {\n    Init: \"[Redux] Init\",\n    SetTime: \"[Redux] SetTime\",\n    GetDepartments: \"[Redux] GetDepartments\",\n    SetDepartments: \"[Redux] SetDepartments\",\n    SetDepartment: \"[Redux] SetDepartment\",\n    GetDepartmentSubjects: \"[Redux] GetDepartmentSubjects\",\n    SetSubjects: \"[Redux] SetSubjects\",\n    AddOrUpdateSubjects: \"[Redux] AddOrUpdateSubjects\",\n    AddSubjectDone: \"[Redux] AddSubjectDone\",\n    RemoveSubject: \"[Redux] RemoveSubject\",\n    AddOrUpdateShifts: \"[Redux] AddOrUpdateShifts\",\n    Nothing: \"[Redux] Nothing\",\n};\n\nconst initialState = {\n    time: {\n        all: [2021, 2020, 2019, 2018, 2017, 2016, 2015],\n        chosen: 2021\n    },\n    department: {\n        all: [],\n        chosen: undefined\n    },\n    subject: {\n        all: [],\n        chosen: {}\n    },\n    shifts: {},\n    loading: true\n};\n\nexport const reducer = persistReducer(\n    {storage, key: \"simulador-horarios\"},\n    (state = initialState, action) => {\n        switch (action.type) {\n            case types.SetTime: {\n                const newState = {...state};\n                newState.time = {\n                    ...state.time,\n                    chosen: action.payload\n                };\n                return newState;\n            }\n            case types.GetDepartments: {\n                const newState = {...state};\n                newState.loading = true;\n                return newState;\n            }\n            case types.SetDepartments: {\n                const newState = {...state};\n                newState.department = {\n                    ...state.department,\n                    all: action.payload\n                };\n                newState.loading = false;\n                return newState;\n            }\n            case types.SetDepartment: {\n                const newState = {...state};\n                newState.department = {\n                    ...state.department,\n                    chosen: action.payload\n                };\n                return newState;\n            }\n            case types.GetDepartmentSubjects: {\n                const newState = {...state};\n                newState.loading = true;\n                return newState;\n            }\n            case types.SetSubjects: {\n                const newState = {...state};\n                newState.subject = {\n                    ...state.subject,\n                    all: action.payload\n                };\n                newState.loading = false;\n                return newState;\n            }\n            case types.AddOrUpdateSubjects: {\n                const newState = {...state};\n                newState.loading = true;\n                return newState;\n            }\n            case types.AddSubjectDone: {\n                const newState = {...state};\n                let newChosen = {...state.subject.chosen};\n                newChosen[action.payload.id] = action.payload;\n                newState.subject = {\n                    ...state.subject,\n                    chosen: {...newChosen}\n                };\n                return newState;\n            }\n            case types.RemoveSubject: {\n                const newState = {...state};\n                let newChosen = {...state.subject.chosen};\n                delete newChosen[action.payload];\n                newState.subject = {\n                    ...state.subject,\n                    chosen: {...newChosen}\n                };\n                let newShifts = {...state.shifts};\n                delete newShifts[action.payload];\n                newState.shifts = {...newShifts};\n                return newState;\n            }\n            case types.AddOrUpdateShifts: {\n                const newState = {...state};\n                newState.shifts = {...state.shifts};\n                newState.shifts[action.payload.subject] = action.payload.shifts;\n                newState.loading = false;\n                return newState;\n            }\n            default:\n                const newState = {...state};\n                newState.loading = false;\n                return newState;\n        }\n    }\n);\n\nexport const actions = {\n    init: () => ({ type: types.Init }),\n    setTime: (time) => ({ type: types.SetTime, payload: time }),\n    getDepartments: () => ({ type: types.GetDepartments }),\n    setDepartments: (departments) => ({ type: types.SetDepartments, payload: departments }),\n    setDepartment: (department) => ({ type: types.SetDepartment, payload: department }),\n    getDepartmentSubjects: (department) => ({ type: types.GetDepartmentSubjects, payload: department }),\n    setSubjects: (subjects) => ({ type: types.SetSubjects, payload: subjects }),\n    addOrUpdateSubjects: (subjects) => ({ type: types.AddOrUpdateSubjects, payload: subjects }),\n    addSubjectDone: (subjectInfo) => ({ type: types.AddSubjectDone, payload: subjectInfo }),\n    removeSubject: (subject) => ({ type: types.RemoveSubject, payload: subject }),\n    addOrUpdateShifts: (subject, shifts) => ({ type: types.AddOrUpdateShifts, payload: {subject, shifts} }),\n    nothing: () => ({ type: types.Nothing })\n};\n\nexport function* saga() {\n    yield takeLatest(types.Init, function* () {\n        yield put(actions.getDepartments());\n    });\n    yield takeLatest(types.GetDepartments, function* () {\n        const {data} = yield api.getDepartments();\n        yield put(actions.setDepartments(data));\n    });\n    yield takeLatest(types.SetDepartment, function* ({payload: department}) {\n        const {data} = yield api.getDepartmentSubjects(department);\n        yield put(actions.setSubjects(data.classes));\n    });\n    yield takeLatest(types.SetTime, function* ({payload: time}) {\n        const subjects = yield select(state => state.redux.subject.chosen);\n        yield put(actions.addOrUpdateSubjects(Object.keys(subjects)));\n    });\n    yield takeLatest(types.AddOrUpdateSubjects, function* ({payload: subjects}) {\n        let index = 0;\n        let added = 0;\n        do {\n            let subject = Array.isArray(subjects) ? subjects[index++] : subjects;\n            if (subject > 0) {\n                const {data} = yield api.getSubject(subject);\n                let subjectInfo = data;\n                let instances = data.instances;\n                const year = yield select(state => state.redux.time.chosen);\n                let found = false;\n                let instance = undefined;\n                for (let index = 0; !found && index < instances.length; index++) {\n                    if (instances[index].year == year) {\n                        instance = instances[index].id;\n                        found = true;\n                    }\n                }\n                if (instance) {\n                    yield put(actions.addSubjectDone(subjectInfo));\n                    let infoSubject = {...subjectInfo};\n                    infoSubject.credits = infoSubject.credits / 2;\n                    delete infoSubject.instances;\n                    delete infoSubject.url;\n                    const {data} = yield api.getSubjectShifts(instance);\n                    const shiftsInformation = data;\n                    const shifts = {\n                        t: {},\n                        tp: {},\n                        p: {}\n                    };\n                    const {data: {building: {abbreviation}}} = yield api.getDepartmentSubjects(infoSubject.department.id);\n                    shiftsInformation.map(shift => {\n                        let infoShift = {...shift};\n                        delete infoShift.teachers;\n                        delete infoShift.url;\n                        for (let index = 0; index < infoShift.instances.length; index++) {\n                            infoShift.instances[index].duration = infoShift.instances[index].duration / 30;\n                            infoShift.instances[index].room = infoShift.instances[index].room ? abbreviation + \" \" + infoShift.instances[index].room : \"-\";\n                        }\n                        let type = shift.type_display.indexOf(\"Teórico-Prático\") >= 0\n                            ? \"TP\"\n                            : shift.type_display.indexOf(\"Teórico\") >= 0\n                                ? \"T\"\n                                : \"P\";\n                        infoShift.type = {\n                            name: type,\n                            title: shift.type_display\n                        };\n                        delete infoShift.type_display;\n                        shifts[type.toLowerCase()][shift.number] = {\n                            subject: infoSubject,\n                            shift: infoShift\n                        };\n                    });\n                    yield put(actions.addOrUpdateShifts(subject, shifts));\n                    added++;\n                } else {\n                    yield put(actions.removeSubject(subject));\n                }\n            }\n        } while (Array.isArray(subjects) && index <= subjects.length);\n        if (added == 0)\n            yield put(actions.nothing());\n    });\n}\n","import {all} from \"redux-saga/effects\";\nimport {combineReducers} from \"redux\";\n\nimport * as redux from \"./duck/redux.duck\";\n\nexport const rootReducer = combineReducers({\n    redux: redux.reducer\n});\n\nexport function* rootSaga() {\n    yield all([redux.saga()]);\n}\n","import {configureStore, getDefaultMiddleware} from \"@reduxjs/toolkit\";\nimport createSagaMiddleware from \"redux-saga\";\nimport {reduxBatch} from \"@manaflair/redux-batch\";\nimport {persistStore} from \"redux-persist\";\nimport {rootReducer, rootSaga} from \"./rootReducer\";\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middleware = [\n    ...getDefaultMiddleware({\n        immutableCheck: false,\n        serializableCheck: false,\n        thunk: true\n    }),\n    sagaMiddleware\n];\n\nconst store = configureStore({\n    reducer: rootReducer,\n    middleware,\n    devTools: process.env.NODE_ENV !== \"production\",\n    enhancers: [reduxBatch]\n});\n\n/**\n * @see https://github.com/rt2zz/redux-persist#persiststorestore-config-callback\n * @see https://github.com/rt2zz/redux-persist#persistor-object\n */\nexport const persistor = persistStore(store);\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import React from \"react\";\nimport \"./index.css\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {actions} from \"../../redux/duck/redux.duck\";\n\nconst TopMenu = ({name, logo, times, time, departments, department, subjects, subject}) => {\n    const dispatch = useDispatch();\n\n    const year = useSelector(state => state.redux.time.chosen);\n\n    const chooseTime = (time) => {\n        dispatch(actions.setTime(time));\n    };\n\n    const chooseDepartment = (department) => {\n        dispatch(actions.setDepartment(department));\n    };\n\n    const chooseSubject = (subject) => {\n        dispatch(actions.addOrUpdateSubjects(subject));\n    };\n\n    const removeSubject = (subject) => {\n        dispatch(actions.removeSubject(subject));\n    };\n\n    const chosenSubjects = Object.values(subject).sort((a, b) => {return a.abbreviation > b.abbreviation});\n\n    return <>\n        <div id=\"topMenu\">\n            <span>\n                <img src={logo} />\n                <h1>{name}</h1>\n            </span>\n            <span>\n                <select\n                    value={time}\n                    onChange={(event) => chooseTime(event.target.value)}\n                >\n                    <option disabled selected>Escolher Período Letivo</option>\n                    {\n                        times.map(year =>\n                            <option value={year}>{year}</option>\n                        )\n                    }\n                </select>\n                <select\n                    value={department}\n                    onChange={(event) => chooseDepartment(event.target.value)}\n                >\n                    <option disabled selected>Escolher Departamento</option>\n                    {\n                        departments.map(option =>\n                            <option value={option.id}>{option.name}</option>\n                        )\n                    }\n                </select>\n                <select\n                    onChange={(event) => chooseSubject(event.target.value)}\n                >\n                    <option value={-1} selected>Adicionar Cadeira</option>\n                    {\n                        subjects.map(option =>\n                            subject[option.id]\n                                ? <></>\n                                : <option value={option.id}>{option.name}</option>\n                        )\n                    }\n                </select>\n            </span>\n        </div>\n        <div id=\"subTopMenu\">\n            <div id=\"subjects\">\n                {\n                    chosenSubjects.map(obj =>\n                        <div title={obj.name}>\n                            {obj.abbreviation}\n                            <span onClick={() => removeSubject(obj.id)}>X</span>\n                        </div>\n                    )\n                }\n            </div>\n            <div id=\"update\" onClick={() => chooseTime(year)}>&#8634; Atualizar</div>\n        </div>\n    </>\n};\n\nexport default TopMenu;","const conf = {\n    name: \"Simulador de Horários\",\n    logo: \"./logo.png\"\n};\n\nexport default conf;","import React from \"react\";\nimport TopMenu from \"../component/topMenu\";\nimport conf from \"../conf\";\nimport {useSelector} from \"react-redux\";\n\nconst TopMenuContainer = () => {\n    const times = useSelector(state => state.redux.time.all);\n    const time = useSelector(state => state.redux.time.chosen);\n    const departments = useSelector(state => state.redux.department.all);\n    const department = useSelector(state => state.redux.department.chosen);\n    const subjects = useSelector(state => state.redux.subject.all);\n    const subject = useSelector(state => state.redux.subject.chosen);\n\n    return <TopMenu\n        name={conf.name}\n        logo={conf.logo}\n        times={times}\n        time={time}\n        departments={departments}\n        department={department}\n        subjects={subjects}\n        subject={subject}\n    />\n};\n\nexport default TopMenuContainer;","import React from \"react\";\nimport \"./index.css\";\n\nconst Loader = () => {\n    return <div className=\"loaderContainer\">\n        <div className=\"loader\"></div>\n    </div>\n};\n\nexport default Loader;","import React from \"react\";\nimport \"./index.css\";\nimport {useSelector} from \"react-redux\";\nimport Loader from \"../loader\";\n\nconst Timetable = ({shifts, subjects}) => {\n    const hours = [];\n    for (let current = 8; current <= 23.5; current = current + 0.5)\n        hours.push(current * 60);\n\n    const classes = [];\n    const filled = [];\n    hours.map(() => {\n        let hour1 = [];\n        let hour2 = [];\n        [1, 2, 3, 4, 5].map(() => {\n            hour1.push([]);\n            hour2.push(0);\n        })\n        classes.push(hour1);\n        filled.push(hour2);\n    });\n\n    const maxClasses = [1, 1, 1, 1, 1];\n\n    Object.keys(shifts).map(subject => {\n        Object.keys(shifts[subject]).map(type => {\n            Object.keys(shifts[subject][type]).map(number => {\n                    let shiftInfo = shifts[subject][type][number];\n                    shiftInfo.shift.instances.map(instance => {\n                        classes[hours.indexOf(instance.start)][instance.weekday].push({\n                            subject: shiftInfo.subject,\n                            shift: {\n                                ...instance,\n                                number: shiftInfo.shift.number,\n                                type: shiftInfo.shift.type\n                            }\n                        });\n                        for (let hour = hours.indexOf(instance.start); hour < hours.indexOf(instance.start) + (instance.duration); hour++) {\n                            filled[hour][instance.weekday]++;\n                            maxClasses[instance.weekday] = Math.max(maxClasses[instance.weekday], filled[hour][instance.weekday]);\n                        }\n                    });\n                }\n            )\n        });\n    });\n\n    return <>\n        <table className=\"timetable\">\n            <thead>\n                <tr>\n                    <th>Hora</th>\n                    <th colSpan={maxClasses[0]}>2ª</th>\n                    <th colSpan={maxClasses[1]}>3ª</th>\n                    <th colSpan={maxClasses[2]}>4ª</th>\n                    <th colSpan={maxClasses[3]}>5ª</th>\n                    <th colSpan={maxClasses[4]}>6ª</th>\n                </tr>\n            </thead>\n            <tbody>\n            {\n                hours.map(hour => <tr>\n                    <td>{\n                        (hour/60).toString().indexOf(\".5\") == -1\n                            ? parseInt(hour/60) < 10\n                                ? \"0\" + parseInt(hour/60)\n                                : parseInt(hour/60)\n                            : parseInt(hour/60)+1 < 10\n                                ? \"0\" + (parseInt(hour/60)+1)\n                                : (parseInt(hour/60)+1)\n\n                    }:00</td>\n                        {\n                            [0, 1, 2, 3, 4].map(day => <>\n                                {\n                                    filled[hours.indexOf(hour)][day]\n                                        ? classes[hours.indexOf(hour)][day].sort(\n                                            (a, b) => {\n                                                if (a.subject.abbreviation != b.subject.abbreviation)\n                                                    return a.subject.abbreviation > b.subject.abbreviation;\n                                                else\n                                                    return a.shift.number > b.shift.number;\n                                            }\n                                        ).map(shiftInfo =>\n                                            <td rowSpan={shiftInfo.shift.duration} className={`class ${shiftInfo.shift.type.name.toLowerCase()}`}>\n                                                <h3><span title={shiftInfo.subject.name}>{shiftInfo.subject.abbreviation}</span></h3>\n                                                <p><span title={shiftInfo.shift.type.title + \" \" + shiftInfo.shift.number}>{shiftInfo.shift.type.name} {shiftInfo.shift.number}</span><br />{shiftInfo.shift.room}</p>\n                                            </td>\n                                        )\n                                        : <td colSpan={maxClasses[day] - filled[hours.indexOf(hour)][day]}></td>\n                                }\n                                {\n                                    maxClasses[day] > filled[hours.indexOf(hour)][day] && filled[hours.indexOf(hour)][day]\n                                        ? <td colSpan={maxClasses[day] - filled[hours.indexOf(hour)][day]}></td>\n                                        : <></>\n                                }\n                                </>\n                            )\n                        }\n                    {/*\n                        [0, 1, 2, 3, 4].map(day => <>\n                            {\n                                classes[hours.indexOf(hour)][day].map(shift => <td>\n                                    {shift.id}\n                                </td>)\n                            }\n                        </>)\n                    */}\n                </tr>\n                )\n            }\n            </tbody>\n        </table>\n    </>\n};\n\nexport default Timetable;","import React from \"react\";\nimport Timetable from \"../component/timetable\";\nimport {useSelector} from \"react-redux\";\n\nconst ContentContainer = () => {\n    const shifts = useSelector(state => state.redux.shifts);\n    const subjects = useSelector(state => state.redux.subject.chosen);\n\n    return <div id=\"content\">\n        <Timetable shifts={shifts} subjects={subjects} />\n    </div>\n};\n\nexport default ContentContainer;","import React, {useEffect} from \"react\";\nimport TopMenuContainer from \"./topMenu\";\nimport ContentContainer from \"./content\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {actions} from \"../redux/duck/redux.duck\";\nimport Loader from \"../component/loader\";\n\nconst PageContainer = () => {\n    const dispatch = useDispatch();\n    const loading = useSelector(state => state.redux.loading);\n\n    useEffect(\n        () => {\n            dispatch(actions.init());\n        },\n        []\n    );\n\n    return <>\n        <TopMenuContainer />\n        <ContentContainer />\n        {\n            loading ? <Loader /> : <></>\n        }\n    </>\n};\n\nexport default PageContainer;","import React from 'react';\nimport axios from \"axios\";\nimport * as _redux from \"./redux\";\nimport store, {persistor} from \"./redux/store\";\nimport {Provider} from \"react-redux\";\nimport {PersistGate} from \"redux-persist/integration/react\";\nimport './App.css';\nimport PageContainer from \"./container/page\";\nimport \"./component/global.css\";\n\nfunction App() {\n    _redux.setupAxios(axios, store);\n\n    return (\n        <Provider store={store}>\n            <PersistGate persistor={persistor} loading={null}>\n                <PageContainer />\n            </PersistGate>\n        </Provider>\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}