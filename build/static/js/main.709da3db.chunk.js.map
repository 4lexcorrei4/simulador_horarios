{"version":3,"sources":["redux/api/urls.js","redux/api/api.js","redux/duck/redux.duck.js","redux/rootReducer.js","redux/store.js","component/topMenu/index.js","conf/index.js","container/topMenu.js","component/timetable/index.js","container/content.js","container/page.js","App.js","reportWebVitals.js","index.js"],"names":["urls","base","departments","departmentSubjects","depId","subject","subjectShifts","instance","getDepartmentSubjects","department","axios","get","getSubject","getSubjectShifts","saga","types","initialState","time","all","chosen","undefined","shifts","reducer","persistReducer","storage","key","state","action","type","newState","payload","newChosen","id","newShifts","actions","subjects","subjectInfo","takeLatest","put","data","api","classes","select","redux","Object","keys","index","Array","isArray","instances","year","found","length","infoSubject","credits","url","shiftsInformation","t","tp","p","abbreviation","building","map","shift","infoShift","teachers","duration","room","type_display","indexOf","name","title","toLowerCase","number","rootSaga","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","middleware","getDefaultMiddleware","immutableCheck","serializableCheck","thunk","store","configureStore","devTools","process","enhancers","reduxBatch","persistor","persistStore","run","TopMenu","logo","times","dispatch","useDispatch","chosenSubjects","values","sort","a","b","src","value","onChange","event","chooseTime","target","disabled","selected","chooseDepartment","option","chooseSubject","obj","onClick","removeSubject","conf","TopMenuContainer","useSelector","Timetable","hours","current","push","filled","hour1","hour2","maxClasses","shiftInfo","start","weekday","hour","Math","max","className","colSpan","parseInt","toString","day","rowSpan","ContentContainer","PageContainer","useEffect","App","loading","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.709da3db.chunk.js","sourcesContent":["const urls = {\n    base: () => \"https://api.horarios.bitsys.tech/get?url=\",\n    departments: () => urls.base() + \"/departments\",\n    departmentSubjects: (depId) => urls.base() + \"/department/\" + depId,\n    subject: (subject) => urls.base() + \"/class/\" + subject,\n    subjectShifts: (instance) => urls.base() + \"/class/i/\" + instance + \"/shifts\"\n};\n\nexport default urls;","import axios from \"axios\";\nimport urls from \"./urls\";\n\nexport function getDepartments() {\n    return axios.get(urls.departments());\n}\n\nexport function getDepartmentSubjects(department) {\n    return axios.get(urls.departmentSubjects(department));\n}\n\nexport function getSubject(subject) {\n    return axios.get(urls.subject(subject));\n}\n\nexport function getSubjectShifts(instance) {\n    return axios.get(urls.subjectShifts(instance));\n}","import {put, takeLatest, select, all} from \"redux-saga/effects\";\nimport {persistReducer} from \"redux-persist\";\nimport {useHistory} from \"react-router-dom\";\nimport storage from \"redux-persist/lib/storage\";\nimport * as api from \"../api/api\";\n//import Swal from \"sweetalert2\";\n//import withReactContent from \"sweetalert2-react-content\";\n\n//const swal = withReactContent(Swal);\n\nexport const types = {\n    Init: \"[Redux] Init\",\n    SetTime: \"[Redux] SetTime\",\n    GetDepartments: \"[Redux] GetDepartments\",\n    SetDepartments: \"[Redux] SetDepartments\",\n    SetDepartment: \"[Redux] SetDepartment\",\n    GetDepartmentSubjects: \"[Redux] GetDepartmentSubjects\",\n    SetSubjects: \"[Redux] SetSubjects\",\n    AddOrUpdateSubjects: \"[Redux] AddOrUpdateSubjects\",\n    AddSubjectDone: \"[Redux] AddSubjectDone\",\n    RemoveSubject: \"[Redux] RemoveSubject\",\n    AddOrUpdateShifts: \"[Redux] AddOrUpdateShifts\"\n};\n\nconst initialState = {\n    time: {\n        all: [2021, 2020, 2019, 2018, 2017, 2016, 2015],\n        chosen: 2021\n    },\n    department: {\n        all: [],\n        chosen: undefined\n    },\n    subject: {\n        all: [],\n        chosen: {}\n    },\n    shifts: {}\n};\n\nexport const reducer = persistReducer(\n    {storage, key: \"simulador-horarios\"},\n    (state = initialState, action) => {\n        switch (action.type) {\n            case types.SetTime: {\n                const newState = {...state};\n                newState.time = {\n                    ...state.time,\n                    chosen: action.payload\n                };\n                return newState;\n            }\n            case types.SetDepartments: {\n                const newState = {...state};\n                newState.department = {\n                    ...state.department,\n                    all: action.payload\n                };\n                return newState;\n            }\n            case types.SetDepartment: {\n                const newState = {...state};\n                newState.department = {\n                    ...state.department,\n                    chosen: action.payload\n                };\n                return newState;\n            }\n            case types.SetSubjects: {\n                const newState = {...state};\n                newState.subject = {\n                    ...state.subject,\n                    all: action.payload\n                };\n                return newState;\n            }\n            case types.AddSubjectDone: {\n                const newState = {...state};\n                let newChosen = {...state.subject.chosen};\n                newChosen[action.payload.id] = action.payload;\n                newState.subject = {\n                    ...state.subject,\n                    chosen: {...newChosen}\n                };\n                return newState;\n            }\n            case types.RemoveSubject: {\n                const newState = {...state};\n                let newChosen = {...state.subject.chosen};\n                delete newChosen[action.payload];\n                newState.subject = {\n                    ...state.subject,\n                    chosen: {...newChosen}\n                };\n                let newShifts = {...state.shifts};\n                delete newShifts[action.payload];\n                newState.shifts = {...newShifts};\n                return newState;\n            }\n            case types.AddOrUpdateShifts: {\n                const newState = {...state};\n                newState.shifts = {...state.shifts};\n                newState.shifts[action.payload.subject] = action.payload.shifts;\n                return newState;\n            }\n            default:\n                return state;\n        }\n    }\n);\n\nexport const actions = {\n    init: () => ({ type: types.Init }),\n    setTime: (time) => ({ type: types.SetTime, payload: time }),\n    getDepartments: () => ({ type: types.GetDepartments }),\n    setDepartments: (departments) => ({ type: types.SetDepartments, payload: departments }),\n    setDepartment: (department) => ({ type: types.SetDepartment, payload: department }),\n    getDepartmentSubjects: (department) => ({ type: types.GetDepartmentSubjects, payload: department }),\n    setSubjects: (subjects) => ({ type: types.SetSubjects, payload: subjects }),\n    addOrUpdateSubjects: (subjects) => ({ type: types.AddOrUpdateSubjects, payload: subjects }),\n    addSubjectDone: (subjectInfo) => ({ type: types.AddSubjectDone, payload: subjectInfo }),\n    removeSubject: (subject) => ({ type: types.RemoveSubject, payload: subject }),\n    addOrUpdateShifts: (subject, shifts) => ({ type: types.AddOrUpdateShifts, payload: {subject, shifts} })\n};\n\nexport function* saga() {\n    yield takeLatest(types.Init, function* () {\n        yield put(actions.getDepartments());\n    });\n    yield takeLatest(types.GetDepartments, function* () {\n        const {data} = yield api.getDepartments();\n        yield put(actions.setDepartments(data));\n    });\n    yield takeLatest(types.SetDepartment, function* ({payload: department}) {\n        const {data} = yield api.getDepartmentSubjects(department);\n        yield put(actions.setSubjects(data.classes));\n    });\n    yield takeLatest(types.SetTime, function* ({payload: time}) {\n        const subjects = yield select(state => state.redux.subject.chosen);\n        yield put(actions.addOrUpdateSubjects(Object.keys(subjects)));\n    });\n    yield takeLatest(types.AddOrUpdateSubjects, function* ({payload: subjects}) {\n        let index = 0;\n        do {\n            let subject = Array.isArray(subjects) ? subjects[index++] : subjects;\n            if (subject > 0) {\n                const {data} = yield api.getSubject(subject);\n                let subjectInfo = data;\n                let instances = data.instances;\n                const year = yield select(state => state.redux.time.chosen);\n                let found = false;\n                let instance = undefined;\n                for (let index = 0; !found && index < instances.length; index++) {\n                    if (instances[index].year == year) {\n                        instance = instances[index].id;\n                        found = true;\n                    }\n                }\n                if (instance) {\n                    yield put(actions.addSubjectDone(subjectInfo));\n                    let infoSubject = {...subjectInfo};\n                    infoSubject.credits = infoSubject.credits / 2;\n                    delete infoSubject.instances;\n                    delete infoSubject.url;\n                    const {data} = yield api.getSubjectShifts(instance);\n                    const shiftsInformation = data;\n                    const shifts = {\n                        t: {},\n                        tp: {},\n                        p: {}\n                    };\n                    const {data: {building: {abbreviation}}} = yield api.getDepartmentSubjects(infoSubject.department.id);\n                    shiftsInformation.map(shift => {\n                        let infoShift = {...shift};\n                        delete infoShift.teachers;\n                        delete infoShift.url;\n                        for (let index = 0; index < infoShift.instances.length; index++) {\n                            infoShift.instances[index].duration = infoShift.instances[index].duration / 30;\n                            infoShift.instances[index].room = infoShift.instances[index].room ? abbreviation + \" \" + infoShift.instances[index].room : \"-\";\n                        }\n                        let type = shift.type_display.indexOf(\"Teórico-Prático\") >= 0\n                            ? \"TP\"\n                            : shift.type_display.indexOf(\"Teórico\") >= 0\n                                ? \"T\"\n                                : \"P\";\n                        infoShift.type = {\n                            name: type,\n                            title: shift.type_display\n                        };\n                        delete infoShift.type_display;\n                        shifts[type.toLowerCase()][shift.number] = {\n                            subject: infoSubject,\n                            shift: infoShift\n                        };\n                    });\n                    yield put(actions.addOrUpdateShifts(subject, shifts));\n                } else {\n                    yield put(actions.removeSubject(subject));\n                }\n            }\n        } while (Array.isArray(subjects) && index <= subjects.length);\n    });\n}\n","import {all} from \"redux-saga/effects\";\nimport {combineReducers} from \"redux\";\n\nimport * as redux from \"./duck/redux.duck\";\n\nexport const rootReducer = combineReducers({\n    redux: redux.reducer\n});\n\nexport function* rootSaga() {\n    yield all([redux.saga()]);\n}\n","import {configureStore, getDefaultMiddleware} from \"@reduxjs/toolkit\";\nimport createSagaMiddleware from \"redux-saga\";\nimport {reduxBatch} from \"@manaflair/redux-batch\";\nimport {persistStore} from \"redux-persist\";\nimport {rootReducer, rootSaga} from \"./rootReducer\";\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middleware = [\n    ...getDefaultMiddleware({\n        immutableCheck: false,\n        serializableCheck: false,\n        thunk: true\n    }),\n    sagaMiddleware\n];\n\nconst store = configureStore({\n    reducer: rootReducer,\n    middleware,\n    devTools: process.env.NODE_ENV !== \"production\",\n    enhancers: [reduxBatch]\n});\n\n/**\n * @see https://github.com/rt2zz/redux-persist#persiststorestore-config-callback\n * @see https://github.com/rt2zz/redux-persist#persistor-object\n */\nexport const persistor = persistStore(store);\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import React from \"react\";\nimport \"./index.css\";\nimport {useDispatch} from \"react-redux\";\nimport {actions} from \"../../redux/duck/redux.duck\";\n\nconst TopMenu = ({name, logo, times, time, departments, department, subjects, subject}) => {\n    const dispatch = useDispatch();\n\n    const chooseTime = (time) => {\n        dispatch(actions.setTime(time));\n    };\n\n    const chooseDepartment = (department) => {\n        dispatch(actions.setDepartment(department));\n    };\n\n    const chooseSubject = (subject) => {\n        dispatch(actions.addOrUpdateSubjects(subject));\n    };\n\n    const removeSubject = (subject) => {\n        dispatch(actions.removeSubject(subject));\n    };\n\n    const chosenSubjects = Object.values(subject).sort((a, b) => {return a.abbreviation > b.abbreviation});\n\n    return <>\n        <div id=\"topMenu\">\n            <span>\n                <img src={logo} />\n                <h1>{name}</h1>\n            </span>\n            <span>\n                <select\n                    value={time}\n                    onChange={(event) => chooseTime(event.target.value)}\n                >\n                    <option disabled selected>Escolher Período Letivo</option>\n                    {\n                        times.map(year =>\n                            <option value={year}>{year}</option>\n                        )\n                    }\n                </select>\n                <select\n                    value={department}\n                    onChange={(event) => chooseDepartment(event.target.value)}\n                >\n                    <option disabled selected>Escolher Departamento</option>\n                    {\n                        departments.map(option =>\n                            <option value={option.id}>{option.name}</option>\n                        )\n                    }\n                </select>\n                <select\n                    onChange={(event) => chooseSubject(event.target.value)}\n                >\n                    <option value={-1} selected>Adicionar Cadeira</option>\n                    {\n                        subjects.map(option =>\n                            subject[option.id]\n                                ? <></>\n                                : <option value={option.id}>{option.name}</option>\n                        )\n                    }\n                </select>\n            </span>\n        </div>\n        <div id=\"subTopMenu\">\n            {\n                chosenSubjects.map(obj =>\n                    <div title={obj.name}>\n                        {obj.abbreviation}\n                        <span onClick={() => removeSubject(obj.id)}>X</span>\n                    </div>\n                )\n            }\n        </div>\n    </>\n};\n\nexport default TopMenu;","const conf = {\n    name: \"Simulador de Horários\",\n    logo: \"./logo.png\"\n};\n\nexport default conf;","import React from \"react\";\nimport TopMenu from \"../component/topMenu\";\nimport conf from \"../conf\";\nimport {useSelector} from \"react-redux\";\n\nconst TopMenuContainer = () => {\n    const times = useSelector(state => state.redux.time.all);\n    const time = useSelector(state => state.redux.time.chosen);\n    const departments = useSelector(state => state.redux.department.all);\n    const department = useSelector(state => state.redux.department.chosen);\n    const subjects = useSelector(state => state.redux.subject.all);\n    const subject = useSelector(state => state.redux.subject.chosen);\n\n    return <TopMenu\n        name={conf.name}\n        logo={conf.logo}\n        times={times}\n        time={time}\n        departments={departments}\n        department={department}\n        subjects={subjects}\n        subject={subject}\n    />\n};\n\nexport default TopMenuContainer;","import React from \"react\";\nimport \"./index.css\";\n\nconst Timetable = ({shifts, subjects}) => {\n    const hours = [];\n    for (let current = 8; current <= 23.5; current = current + 0.5)\n        hours.push(current * 60);\n\n    const classes = [];\n    const filled = [];\n    hours.map(() => {\n        let hour1 = [];\n        let hour2 = [];\n        [1, 2, 3, 4, 5].map(() => {\n            hour1.push([]);\n            hour2.push(0);\n        })\n        classes.push(hour1);\n        filled.push(hour2);\n    });\n\n    const maxClasses = [1, 1, 1, 1, 1];\n\n    Object.keys(shifts).map(subject => {\n        Object.keys(shifts[subject]).map(type => {\n            Object.keys(shifts[subject][type]).map(number => {\n                    let shiftInfo = shifts[subject][type][number];\n                    shiftInfo.shift.instances.map(instance => {\n                        classes[hours.indexOf(instance.start)][instance.weekday].push({\n                            subject: shiftInfo.subject,\n                            shift: {\n                                ...instance,\n                                number: shiftInfo.shift.number,\n                                type: shiftInfo.shift.type\n                            }\n                        });\n                        for (let hour = hours.indexOf(instance.start); hour < hours.indexOf(instance.start) + (instance.duration); hour++)\n                            filled[hour][instance.weekday]++;\n                        maxClasses[instance.weekday] = Math.max(maxClasses[instance.weekday], classes[hours.indexOf(instance.start)][instance.weekday].length);\n                    });\n                }\n            )\n            /*shift.instances.map(instance => {\n                classes[hours.indexOf(instance.start)][instance.weekday].push({\n                    id: shift.id,\n                    subject: shift.subject,\n                    number: shift.number,\n                    type: shift.type,\n                    class: shift.type.toLowerCase(),\n                    duration: instance.duration / 30,\n                    room: instance.room ? instance.room : \"-\"\n                });\n                for (let hour = hours.indexOf(instance.start); hour < hours.indexOf(instance.start) + (instance.duration / 30); hour++)\n                    filled[hour][instance.weekday]++;\n                maxClasses[instance.weekday] = Math.max(maxClasses[instance.weekday], classes[hours.indexOf(instance.start)][instance.weekday].length);\n            });*/\n        });\n    });\n\n    return <>\n        <table className=\"timetable\">\n            <thead>\n                <tr>\n                    <th>Hora</th>\n                    <th colSpan={maxClasses[0]}>2ª</th>\n                    <th colSpan={maxClasses[1]}>3ª</th>\n                    <th colSpan={maxClasses[2]}>4ª</th>\n                    <th colSpan={maxClasses[3]}>5ª</th>\n                    <th colSpan={maxClasses[4]}>6ª</th>\n                </tr>\n            </thead>\n            <tbody>\n            {\n                hours.map(hour => <tr>\n                    <td>{parseInt(hour/60) < 10 ? \"0\" + parseInt(hour/60) : parseInt(hour/60)}:{(hour/60).toString().indexOf(\".5\") > 0 ? \"30\" : \"00\"}</td>\n                        {\n                            [0, 1, 2, 3, 4].map(day => <>\n                                {\n                                    filled[hours.indexOf(hour)][day]\n                                        ? classes[hours.indexOf(hour)][day].sort(\n                                            (a, b) => {\n                                                if (a.subject.abbreviation != b.subject.abbreviation)\n                                                    return a.subject.abbreviation > b.subject.abbreviation;\n                                                else\n                                                    return a.shift.number > b.shift.number;\n                                            }\n                                        ).map(shiftInfo =>\n                                            <td rowSpan={shiftInfo.shift.duration} className={`class ${shiftInfo.shift.type.name.toLowerCase()}`}>\n                                                <h3 title={shiftInfo.subject.name}>{shiftInfo.subject.abbreviation}</h3>\n                                                <p><span title={shiftInfo.shift.type.title + \" \" + shiftInfo.shift.number}>{shiftInfo.shift.type.name} {shiftInfo.shift.number}</span><br />{shiftInfo.shift.room}</p>\n                                            </td>\n                                        )\n                                        : <td colSpan={maxClasses[day] - filled[hours.indexOf(hour)][day]}></td>\n                                }\n                                {\n                                    maxClasses[day] > filled[hours.indexOf(hour)][day] && filled[hours.indexOf(hour)][day]\n                                        ? <td colSpan={maxClasses[day] - filled[hours.indexOf(hour)][day]}></td>\n                                        : <></>\n                                }\n                                </>\n                            )\n                        }\n                    {/*\n                        [0, 1, 2, 3, 4].map(day => <>\n                            {\n                                classes[hours.indexOf(hour)][day].map(shift => <td>\n                                    {shift.id}\n                                </td>)\n                            }\n                        </>)\n                    */}\n                </tr>\n                )\n            }\n            </tbody>\n        </table>\n    </>\n};\n\nexport default Timetable;","import React from \"react\";\nimport Timetable from \"../component/timetable\";\nimport {useSelector} from \"react-redux\";\n\nconst ContentContainer = () => {\n    const shifts = useSelector(state => state.redux.shifts);\n    const subjects = useSelector(state => state.redux.subject.chosen);\n\n    return <div>\n        <Timetable shifts={shifts} subjects={subjects} />\n    </div>\n};\n\nexport default ContentContainer;","import React, {useEffect} from \"react\";\nimport TopMenuContainer from \"./topMenu\";\nimport ContentContainer from \"./content\";\nimport {useDispatch} from \"react-redux\";\nimport {actions} from \"../redux/duck/redux.duck\";\n\nconst PageContainer = () => {\n    const dispatch = useDispatch();\n\n    useEffect(\n        () => {\n            dispatch(actions.init());\n        },\n        []\n    );\n\n    return <>\n        <TopMenuContainer />\n        <ContentContainer />\n    </>\n};\n\nexport default PageContainer;","import React from 'react';\nimport axios from \"axios\";\nimport * as _redux from \"./redux\";\nimport store, {persistor} from \"./redux/store\";\nimport {Provider} from \"react-redux\";\nimport {PersistGate} from \"redux-persist/integration/react\";\nimport './App.css';\nimport PageContainer from \"./container/page\";\nimport \"./component/global.css\";\n\nfunction App() {\n    _redux.setupAxios(axios, store);\n\n    return (\n        <Provider store={store}>\n            <PersistGate persistor={persistor} loading={null}>\n                <PageContainer />\n            </PersistGate>\n        </Provider>\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}